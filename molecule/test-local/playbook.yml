---

- name: Build Operator in Kubernetes docker container
  # using command so we don't need to install any dependencies
  hosts: k8s
  vars:
    image_name: cost-mgmt.openshift.io/cost-mgmt-operator:testing
  tasks:
    - name: Get existing image hash
      command: docker images -q {{ image_name }}
      register: prev_hash
      changed_when: false

    - name: Build Operator Image
      command: docker build -f /build/build/Dockerfile -t
        {{ image_name }} /build
      register: build_cmd
      changed_when: not prev_hash.stdout or
        (prev_hash.stdout and prev_hash.stdout
        not in ''.join(build_cmd.stdout_lines[-2:]))

    - name: copy test_data file to k8s container
      copy:
        dest: "/tmp/get"
        src: 'test_data.csv'

    - name: copy mock_reporting_api server to k8s container
      copy:
        dest: "/tmp/mock_reporting_api.py"
        src: 'mock_reporting_api.py'

    - name: copy mock_reporting_api pem file to k8s container
      copy:
        dest: "/tmp/mock_reporting_api.pem"
        src: 'mock_reporting_api.pem'

    - name: copy mock_ingress_server file to k8s container
      copy:
        dest: "/tmp/mock_ingress_server.py"
        src: 'mock_ingress_server.py'

- name: Converge on setup
  hosts: localhost
  connection: local
  vars:
    ansible_python_interpreter: '{{ ansible_playbook_python }}'
    deploy_dir: "{{ lookup('env', 'MOLECULE_PROJECT_DIRECTORY') }}/deploy"
    molecule_dir: "{{ lookup('env', 'MOLECULE_PROJECT_DIRECTORY') }}/molecule"
    pull_policy: Never
    REPLACE_IMAGE: cost-mgmt.openshift.io/cost-mgmt-operator:testing
    cm_cr: "{{ lookup('file', '/'.join([molecule_dir,
      'crds/cost_mgmt_cr.yaml'])) | from_yaml }}"
    cm_crd: "{{ lookup('file', '/'.join([deploy_dir,
      'crds/cost_mgmt_crd.yaml'])) | from_yaml }}"
    cm_data_crd: "{{ lookup('file', '/'.join([deploy_dir,
      'crds/cost_mgmt_data_crd.yaml'])) | from_yaml }}"
    cm_data_cr: "{{ lookup('file', '/'.join([molecule_dir,
      'crds/cost_mgmt_data_cr.yaml'])) | from_yaml }}"
    metering_cr: "{{ lookup('file', '/'.join([molecule_dir,
      'crds/metering_cr.yaml'])) | from_yaml }}"
    metering_crd: "{{ lookup('file', '/'.join([molecule_dir,
      'crds/metering_crd.yaml'])) | from_yaml }}"
    metering_route_cr: "{{ lookup('file', '/'.join([molecule_dir,
      'crds/metering_route_cr.yaml'])) | from_yaml }}"
    metering_route_crd: "{{ lookup('file', '/'.join([molecule_dir,
      'crds/metering_route_crd.yaml'])) | from_yaml }}"
    reporting_operator_metering_token: "{{ lookup('file', '/'.join([molecule_dir,
      'crds/reporting_operator_token.yaml'])) | from_yaml }}"
    trusted_ca_config: "{{ lookup('file', '/'.join([molecule_dir,
      'crds/trusted_ca_certmap.yaml'])) | from_yaml }}"
  tasks:
    - block:
        - name: Delete the Operator Deployment
          k8s:
            state: absent
            namespace: '{{ namespace }}'
            definition: "{{ lookup('template',
              '/'.join([deploy_dir, 'operator.yaml'])) }}"
          register: delete_deployment
          when: hostvars[groups.k8s.0].build_cmd.changed

        - name: Wait 30s for Operator Deployment to terminate
          k8s_info:
            api_version: '{{ definition.apiVersion }}'
            kind: '{{ definition.kind }}'
            namespace: '{{ namespace }}'
            name: '{{ definition.metadata.name }}'
          vars:
            definition: "{{ lookup('template',
              '/'.join([deploy_dir, 'operator.yaml'])) | from_yaml }}"
          register: deployment
          until: not deployment.resources
          delay: 3
          retries: 10
          when: delete_deployment.changed

        - name: Create the Operator Deployment
          k8s:
            namespace: '{{ namespace }}'
            definition: "{{ lookup('template', '/'.join([deploy_dir, 'operator.yaml'])) }}"

        - name: find the containerID
          command: docker ps -aqf "ancestor=cost-mgmt.openshift.io/cost-mgmt-operator:testing"
          register: container_id

        - name: debug containerID
          debug:
            var: container_id

        - name: Get existing image hash
          command: docker images -q cost-mgmt.openshift.io/cost-mgmt-operator:testing
          register: prev_hash

        - name: debug image hash
          debug:
            var: prev_hash

        - name: Create the cost-mgmt.openshift.io/v1alpha1.CostManagement crd
          k8s:
            state: present
            namespace: '{{ namespace }}'
            definition: '{{ cm_crd }}'

        - name: Create the cost-mgmt-data.openshift.io/v1alpha1.CostManagementData crd
          k8s:
            state: present
            namespace: '{{ namespace }}'
            definition: '{{ cm_data_crd }}'

        - name: Create the trusted cert ConfigMap
          k8s:
            state: present
            namespace: '{{ namespace }}'
            definition: '{{ trusted_ca_config }}'

        - name: Create the metering namespace
          k8s:
            api_version: v1
            name: "openshift-metering"
            kind: Namespace
            state: present

        - name: Create the cost-mgmt.openshift.io/v1alpha1.CostManagement
          k8s:
            state: present
            namespace: '{{ namespace }}'
            definition: '{{ cm_cr }}'

        - name: Wait 2m for reconciliation to fail due to openshift metering not being configured
          k8s_info:
            api_version: '{{ cm_cr.apiVersion }}'
            kind: '{{ cm_cr.kind }}'
            namespace: '{{ namespace }}'
            name: '{{ cm_cr.metadata.name }}'
          register: cr
          until:
            - "'Failed' in
              (cr | json_query('resources[].status.conditions[].reason'))"
            - "'Metering has not been configured.' in
              (cr | json_query('resources[].status.conditions[].message'))"
          delay: 12
          retries: 10

      rescue:
        - name: debug cr
          ignore_errors: yes
          failed_when: false
          debug:
            var: debug_cr
          vars:
            debug_cr: '{{ lookup("k8s",
              kind=cm_cr.kind,
              api_version=cm_cr.apiVersion,
              namespace=namespace,
              resource_name=cm_cr.metadata.name
            )}}'

        - name: debug cost-mgmt lookup
          ignore_errors: yes
          failed_when: false
          debug:
            var: deploy
          vars:
            deploy: '{{ lookup("k8s",
              kind="Deployment",
              api_version="apps/v1",
              namespace=namespace,
              label_selector="app=cost-mgmt"
            )}}'

        - name: get operator logs
          ignore_errors: yes
          failed_when: false
          command: kubectl logs
            deployment/{{ definition.metadata.name }} -n {{ namespace }}
          environment:
            KUBECONFIG: '{{ lookup("env", "KUBECONFIG") }}'
          vars:
            definition: "{{ lookup('template',
              '/'.join([deploy_dir, 'operator.yaml'])) | from_yaml }}"
          register: log

        - debug: var=log.stdout_lines

        - fail:
            msg: "Failed on action: converge"

    - block:
        - name: Delete the Operator Deployment
          k8s:
            state: absent
            namespace: '{{ namespace }}'
            definition: "{{ lookup('template',
              '/'.join([deploy_dir, 'operator.yaml'])) }}"
          register: delete_deployment
          when: hostvars[groups.k8s.0].build_cmd.changed

        - name: Wait 30s for Operator Deployment to terminate
          k8s_info:
            api_version: '{{ definition.apiVersion }}'
            kind: '{{ definition.kind }}'
            namespace: '{{ namespace }}'
            name: '{{ definition.metadata.name }}'
          vars:
            definition: "{{ lookup('template',
              '/'.join([deploy_dir, 'operator.yaml'])) | from_yaml }}"
          register: deployment
          until: not deployment.resources
          delay: 3
          retries: 10
          when: delete_deployment.changed

        - name: Create the trusted cert ConfigMap
          k8s:
            state: present
            namespace: '{{ namespace }}'
            definition: '{{ trusted_ca_config }}'

        - name: Create the Operator Deployment
          k8s:
            namespace: '{{ namespace }}'
            definition: "{{ lookup('template', '/'.join([deploy_dir, 'operator.yaml'])) }}"

        - name: find the containerID
          command: docker ps -aqf "ancestor=cost-mgmt.openshift.io/cost-mgmt-operator:testing"
          register: container_id

        - name: Create the metering namespace
          k8s:
            api_version: v1
            name: "openshift-metering"
            kind: Namespace
            state: present

        - name: Create the metering.openshift.io/v1alpha1.Metering crd
          k8s:
            state: present
            namespace: '{{ namespace }}'
            definition: '{{ metering_crd }}'

        - name: Create the metering.openshift.io/v1alpha1.Metering cr
          k8s:
            state: present
            namespace: '{{ namespace }}'
            definition: '{{ metering_cr }}'

        - name: Create the metering route crd for testing
          k8s:
            state: present
            namespace: '{{ namespace }}'
            definition: '{{ metering_route_crd }}'

        - name: Create the metering route cr for testing
          k8s:
            state: present
            namespace: '{{ namespace }}'
            definition: '{{ metering_route_cr }}'

        - name: Create the reporting operator token secret for testing
          k8s:
            state: present
            namespace: '{{ namespace }}'
            definition: '{{ reporting_operator_metering_token }}'

        - name: Get the service account token
          k8s_info:
            api_version: v1
            kind: Secret
            namespace: "{{ namespace }}"
            name: "reporting-operator-token-placeholder"
          register: reporting_token

        - name: debug cr
          debug:
            var: reporting_token

        - name: Create the cost-mgmt.openshift.io/v1alpha1.CostManagement crd
          k8s:
            state: present
            namespace: '{{ namespace }}'
            definition: '{{ cm_crd }}'

        - name: Create the cost-mgmt-data.openshift.io/v1alpha1.CostManagementData crd
          k8s:
            state: present
            namespace: '{{ namespace }}'
            definition: '{{ cm_data_crd }}'

        - name: Create the cost-mgmt.openshift.io/v1alpha1.CostManagement
          k8s:
            state: present
            namespace: '{{ namespace }}'
            definition: '{{ cm_cr }}'

        - name: Wait 2m for reconciliation to complete for setup
          k8s_info:
            api_version: '{{ cm_cr.apiVersion }}'
            kind: '{{ cm_cr.kind }}'
            namespace: '{{ namespace }}'
            name: '{{ cm_cr.metadata.name }}'
          register: cr
          until:
            - "'All items completed' in
              (cr | json_query('resources[].status.conditions[].message'))"
          delay: 12
          retries: 10

      rescue:
        - name: debug cr
          ignore_errors: yes
          failed_when: false
          debug:
            var: debug_cr
          vars:
            debug_cr: '{{ lookup("k8s",
              kind=cm_data_cr.kind,
              api_version=cm_data_cr.apiVersion,
              namespace=namespace,
              resource_name=cm_data_cr.metadata.name
            )}}'

        - name: debug cost-mgmt lookup
          ignore_errors: yes
          failed_when: false
          debug:
            var: deploy
          vars:
            deploy: '{{ lookup("k8s",
              kind="Deployment",
              api_version="apps/v1",
              namespace=namespace,
              label_selector="app=cost-mgmt"
            )}}'

        - name: get operator logs
          ignore_errors: yes
          failed_when: false
          command: kubectl logs
            deployment/{{ definition.metadata.name }} -n {{ namespace }}
          environment:
            KUBECONFIG: '{{ lookup("env", "KUBECONFIG") }}'
          vars:
            definition: "{{ lookup('template',
              '/'.join([deploy_dir, 'operator.yaml'])) | from_yaml }}"
          register: log

        - debug: var=log.stdout_lines

        - fail:
            msg: "Failed on action: converge"

- name: Start server on Operator container
  hosts: k8s
  tasks:
    - name: find the containerID
      command: docker ps -aqf "ancestor=cost-mgmt.openshift.io/cost-mgmt-operator:testing"
      register: container_id

    - name: debug containerID
      debug:
        var: container_id

    - name: find the container name
      command: docker ps --format \{\{'.Names'\}\} -f id="{{ container_id.stdout_lines[0] }}"
      register: container_name

    - name: debug container name
      debug:
        var: container_name

    - name: Store container_name in variable
      set_fact:
        containerName: "{{ container_name.stdout_lines[0] | replace('\n', '')}}"

    - name: Execute commands in docker container
      command: docker exec -i "{{ containerName }}" bash -c 'echo "Hello1"; echo "Hello2"'

    - name: create webserver dirs
      command: docker exec -d "{{ containerName }}" bash -c 'mkdir /tmp/www'

    - name: create webserver dirs
      command: docker exec -d "{{ containerName }}" bash -c 'mkdir /tmp/www/api'

    - name: create webserver dirs
      command: docker exec -d "{{ containerName }}" bash -c 'mkdir /tmp/www/api/v1'

    - name: create webserver dirs
      command: docker exec -d "{{ containerName }}" bash -c 'mkdir /tmp/www/api/v1/reports'

    - name: copy test file to container
      command: docker cp /tmp/get "{{ container_id.stdout_lines[0] }}":/tmp/www/api/v1/reports/get
      ignore_errors: true

    - name: copy test server to container
      command: docker cp /tmp/mock_reporting_api.py "{{ container_id.stdout_lines[0] }}":/tmp/www/mock_reporting_api.py
      ignore_errors: true

    - name: copy test server pem to container
      command: docker cp /tmp/mock_reporting_api.pem "{{ container_id.stdout_lines[0] }}":/tmp/www/mock_reporting_api.pem
      ignore_errors: true

    - name: start server
      command: docker exec -i "{{ containerName }}" bash -c 'cd /tmp/www; nohup python3 mock_reporting_api.py </dev/null >/dev/null 2>&1 &'

    - name: copy test server2 to container
      command: docker cp /tmp/mock_ingress_server.py "{{ container_id.stdout_lines[0] }}":/tmp/www/mock_ingress_server.py
      ignore_errors: true

    - name: start server
      command: docker exec -i "{{ containerName }}" bash -c 'cd /tmp/www; nohup python3 mock_ingress_server.py </dev/null >/dev/null 2>&1 &'

- name: Converge for collect
  hosts: localhost
  connection: local
  vars:
    ansible_python_interpreter: '{{ ansible_playbook_python }}'
    deploy_dir: "{{ lookup('env', 'MOLECULE_PROJECT_DIRECTORY') }}/deploy"
    cm_data_cr: "{{ lookup('file', '/'.join([deploy_dir,
      'crds/cost_mgmt_data_cr.yaml'])) | from_yaml }}"
    authentication_secret: "{{ lookup('file', '/'.join([deploy_dir,
      'crds/authentication_secret.yaml'])) | from_yaml }}"
    REPLACE_IMAGE: cost-mgmt.openshift.io/cost-mgmt-operator:testing
  tasks:
    - block:
        - name: Create the authentication Secret
          k8s:
            state: present
            namespace: '{{ namespace }}'
            definition: '{{ authentication_secret }}'

        - name: Create the cost-mgmt-data.openshift.io/v1alpha1.CostManagementData
          k8s:
            state: present
            namespace: '{{ namespace }}'
            definition: '{{ cm_data_cr }}'

        - name: debug cost-mgmt data custom resource
          ignore_errors: yes
          failed_when: false
          debug:
            var: debug_cr
          vars:
            debug_cr: '{{ lookup("k8s",
              kind=cm_data_cr.kind,
              api_version=cm_data_cr.apiVersion,
              namespace=namespace,
              resource_name=cm_data_cr.metadata.name
            )}}'

        - name: Wait 2m for reconciliation to complete for collect
          k8s_info:
            api_version: '{{ cm_data_cr.apiVersion }}'
            kind: '{{ cm_data_cr.kind }}'
            namespace: '{{ namespace }}'
            name: '{{ cm_data_cr.metadata.name }}'
          register: cm_data_cr
          until:
            - "'Successful' in (cm_data_cr |
              json_query('resources[].status.conditions[].reason'))"
          delay: 12
          retries: 10

      rescue:
        - name: debug cr
          ignore_errors: yes
          failed_when: false
          debug:
            var: debug_cr
          vars:
            debug_cr: '{{ lookup("k8s",
              kind=cm_data_cr.kind,
              api_version=cm_data_cr.apiVersion,
              namespace=namespace,
              resource_name=cm_data_cr.metadata.name
            )}}'

        - name: debug cost-mgmt lookup
          ignore_errors: yes
          failed_when: false
          debug:
            var: deploy
          vars:
            deploy: '{{ lookup("k8s",
              kind="Deployment",
              api_version="apps/v1",
              namespace=namespace,
              label_selector="app=cost-mgmt"
            )}}'

        - name: get operator logs
          ignore_errors: yes
          failed_when: false
          command: kubectl logs
            deployment/{{ definition.metadata.name }} -n {{ namespace }}
          environment:
            KUBECONFIG: '{{ lookup("env", "KUBECONFIG") }}'
          vars:
            definition: "{{ lookup('template',
              '/'.join([deploy_dir, 'operator.yaml'])) | from_yaml }}"
          register: log

        - debug: var=log.stdout_lines

        - fail:
            msg: "Failed on action: converge"

- name: Copy tar.gz to k8s from Operator
  hosts: k8s
  tasks:
    - name: find the containerID
      command: docker ps -aqf "ancestor=cost-mgmt.openshift.io/cost-mgmt-operator:testing"
      register: container_id

    - name: Copy tar.gz.file from operator container to k8s container
      command: docker cp "{{ container_id.stdout_lines[0] }}":/tmp/cost-mgmt-operator-collect/cost-mgmt.tar.gz cost.tar.gz

- name: Copy cost-mgmt.tar.gz from k8s to localhost
  hosts: localhost
  connection: local
  tasks:
    - name: Copy tar.gz.file to tmp
      shell: docker cp kind-test-local:cost.tar.gz /tmp/

- import_playbook: '{{ playbook_dir }}/../default/asserts.yml'
