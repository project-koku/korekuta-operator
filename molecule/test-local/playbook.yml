---

- name: Build Operator in Kubernetes docker container
  # using command so we don't need to install any dependencies
  hosts: k8s
  vars:
    image_name: cost-mgmt.openshift.io/cost-mgmt-operator:testing
  tasks:
    - name: Get existing image hash
      command: docker images -q {{ image_name }}
      register: prev_hash
      changed_when: false

    - name: Build Operator Image
      command: docker build -f /build/build/Dockerfile -t
        {{ image_name }} /build
      register: build_cmd
      changed_when: not prev_hash.stdout or
        (prev_hash.stdout and prev_hash.stdout
        not in ''.join(build_cmd.stdout_lines[-2:]))

- name: Converge
  hosts: localhost
  connection: local
  vars:
    ansible_python_interpreter: '{{ ansible_playbook_python }}'
    deploy_dir: "{{ lookup('env', 'MOLECULE_PROJECT_DIRECTORY') }}/deploy"
    pull_policy: Never
    REPLACE_IMAGE: cost-mgmt.openshift.io/cost-mgmt-operator:testing
    custom_resource: "{{ lookup('file', '/'.join([deploy_dir,
      'crds/cost_mgmt_cr.yaml'])) | from_yaml }}"
    custom_resource_def: "{{ lookup('file', '/'.join([deploy_dir,
      'crds/cost_mgmt_crd.yaml'])) | from_yaml }}"
    metering_cr: "{{ lookup('file', '/'.join([deploy_dir,
      'crds/metering_cr.yaml'])) | from_yaml }}"
    metering_crd: "{{ lookup('file', '/'.join([deploy_dir,
      'crds/metering_crd.yaml'])) | from_yaml }}"
  tasks:
    - block:
        - name: Delete the Operator Deployment
          k8s:
            state: absent
            namespace: '{{ namespace }}'
            definition: "{{ lookup('template',
              '/'.join([deploy_dir, 'operator.yaml'])) }}"
          register: delete_deployment
          when: hostvars[groups.k8s.0].build_cmd.changed

        - name: Wait 30s for Operator Deployment to terminate
          k8s_info:
            api_version: '{{ definition.apiVersion }}'
            kind: '{{ definition.kind }}'
            namespace: '{{ namespace }}'
            name: '{{ definition.metadata.name }}'
          vars:
            definition: "{{ lookup('template',
              '/'.join([deploy_dir, 'operator.yaml'])) | from_yaml }}"
          register: deployment
          until: not deployment.resources
          delay: 3
          retries: 10
          when: delete_deployment.changed

        - name: Create the cost-mgmt.openshift.io/v1alpha1.CostManagement crd
          k8s:
            state: present
            namespace: '{{ namespace }}'
            definition: '{{ custom_resource_def }}'

        - name: Create the Operator Deployment
          k8s:
            namespace: '{{ namespace }}'
            definition: "{{ lookup('template',
              '/'.join([deploy_dir, 'operator.yaml'])) }}"

        - name: Create the metering namespace
          k8s:
            api_version: v1
            name: "openshift-metering"
            kind: Namespace
            state: present

        - name: Create the cost-mgmt.openshift.io/v1alpha1.CostManagement
          k8s:
            state: present
            namespace: '{{ namespace }}'
            definition: '{{ custom_resource }}'

        - name: Wait 2m for reconciliation to fail due to openshift metering not being configured
          k8s_info:
            api_version: '{{ custom_resource.apiVersion }}'
            kind: '{{ custom_resource.kind }}'
            namespace: '{{ namespace }}'
            name: '{{ custom_resource.metadata.name }}'
          register: cr
          until:
            - "'Failed' in
              (cr | json_query('resources[].status.conditions[].reason'))"
            - "'Metering has not been configured.' in
              (cr | json_query('resources[].status.conditions[].message'))"
          delay: 12
          retries: 10

      rescue:
        - name: debug cr
          ignore_errors: yes
          failed_when: false
          debug:
            var: debug_cr
          vars:
            debug_cr: '{{ lookup("k8s",
              kind=custom_resource.kind,
              api_version=custom_resource.apiVersion,
              namespace=namespace,
              resource_name=custom_resource.metadata.name
            )}}'

        - name: debug cost-mgmt lookup
          ignore_errors: yes
          failed_when: false
          debug:
            var: deploy
          vars:
            deploy: '{{ lookup("k8s",
              kind="Deployment",
              api_version="apps/v1",
              namespace=namespace,
              label_selector="app=cost-mgmt"
            )}}'

        - name: get operator logs
          ignore_errors: yes
          failed_when: false
          command: kubectl logs
            deployment/{{ definition.metadata.name }} -n {{ namespace }}
          environment:
            KUBECONFIG: '{{ lookup("env", "KUBECONFIG") }}'
          vars:
            definition: "{{ lookup('template',
              '/'.join([deploy_dir, 'operator.yaml'])) | from_yaml }}"
          register: log

        - debug: var=log.stdout_lines

        - fail:
            msg: "Failed on action: converge"

    - block:
        - name: Delete the Operator Deployment
          k8s:
            state: absent
            namespace: '{{ namespace }}'
            definition: "{{ lookup('template',
              '/'.join([deploy_dir, 'operator.yaml'])) }}"
          register: delete_deployment
          when: hostvars[groups.k8s.0].build_cmd.changed

        - name: Wait 30s for Operator Deployment to terminate
          k8s_info:
            api_version: '{{ definition.apiVersion }}'
            kind: '{{ definition.kind }}'
            namespace: '{{ namespace }}'
            name: '{{ definition.metadata.name }}'
          vars:
            definition: "{{ lookup('template',
              '/'.join([deploy_dir, 'operator.yaml'])) | from_yaml }}"
          register: deployment
          until: not deployment.resources
          delay: 3
          retries: 10
          when: delete_deployment.changed

        - name: Create the metering namespace
          k8s:
            api_version: v1
            name: "openshift-metering"
            kind: Namespace
            state: present

        - name: Create the metering.openshift.io/v1alpha1.Metering crd
          k8s:
            state: present
            namespace: '{{ namespace }}'
            definition: '{{ metering_crd }}'

        - name: Create the metering.openshift.io/v1alpha1.Metering cr
          k8s:
            state: present
            namespace: '{{ namespace }}'
            definition: '{{ metering_cr }}'

        - name: Create the cost-mgmt.openshift.io/v1alpha1.CostManagement crd
          k8s:
            state: present
            namespace: '{{ namespace }}'
            definition: '{{ custom_resource_def }}'

        - name: Create the Operator Deployment
          k8s:
            namespace: '{{ namespace }}'
            definition: "{{ lookup('template',
              '/'.join([deploy_dir, 'operator.yaml'])) }}"

        - name: Create the cost-mgmt.openshift.io/v1alpha1.CostManagement
          k8s:
            state: present
            namespace: '{{ namespace }}'
            definition: '{{ custom_resource }}'

        - name: Wait 2m for reconciliation to complete
          k8s_info:
            api_version: '{{ custom_resource.apiVersion }}'
            kind: '{{ custom_resource.kind }}'
            namespace: '{{ namespace }}'
            name: '{{ custom_resource.metadata.name }}'
          register: cr
          until:
            - "'All items completed' in
              (cr | json_query('resources[].status.conditions[].message'))"
          delay: 12
          retries: 10

      rescue:
        - name: debug cr
          ignore_errors: yes
          failed_when: false
          debug:
            var: debug_cr
          vars:
            debug_cr: '{{ lookup("k8s",
              kind=custom_resource.kind,
              api_version=custom_resource.apiVersion,
              namespace=namespace,
              resource_name=custom_resource.metadata.name
            )}}'

        - name: debug cost-mgmt lookup
          ignore_errors: yes
          failed_when: false
          debug:
            var: deploy
          vars:
            deploy: '{{ lookup("k8s",
              kind="Deployment",
              api_version="apps/v1",
              namespace=namespace,
              label_selector="app=cost-mgmt"
            )}}'

        - name: get operator logs
          ignore_errors: yes
          failed_when: false
          command: kubectl logs
            deployment/{{ definition.metadata.name }} -n {{ namespace }}
          environment:
            KUBECONFIG: '{{ lookup("env", "KUBECONFIG") }}'
          vars:
            definition: "{{ lookup('template',
              '/'.join([deploy_dir, 'operator.yaml'])) | from_yaml }}"
          register: log

        - debug: var=log.stdout_lines

        - fail:
            msg: "Failed on action: converge"


- import_playbook: '{{ playbook_dir }}/../default/asserts.yml'
