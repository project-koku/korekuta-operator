---

- name: Obtain cost-mgmt-setup info
  k8s_info:
    api_version: cost-mgmt.openshift.io/v1alpha1
    kind: CostManagement
    namespace: "{{ namespace }}"
    name: cost-mgmt-setup
  register: cost_mgmt_setup

- name: Fail if cost-mgmt-setup does not exist
  fail:
    msg: 'The cost-mgmt-setup custom resource has not been configured.'
  when: not cost_mgmt_setup.resources

- name: Set cluster ID
  set_fact:
    ocp_cluster_id: "{{ cost_mgmt_setup.resources[0].spec.clusterID }}"
  when: cost_mgmt_setup.resources

- name: Check for OCP clusterID
  debug: msg='OCP clusterID is not defined'
  when: not ocp_cluster_id

- name: Set validation boolean
  set_fact:
    ocp_validate_cert: "{{ cost_mgmt_setup.resources[0].spec.validate_cert }}"
  when: cost_mgmt_setup.resources

- name: Check for validation boolean
  debug: msg='HTTPS certificate validation variable is not defined; defaulting to true'
  when: not cost_mgmt_setup.resources

- name: Set service account token name
  set_fact:
    reporting_operator_token_name: "{{ cost_mgmt_setup.resources[0].spec.reporting_operator_token_name }}"
  when: cost_mgmt_setup.resources

- name: Check for service account token name
  debug: msg='Reporting Operator service account token name is not defined'
  when: not reporting_operator_token_name

- name: Fail if the clusterID or service token are not defined
  fail:
    msg: 'The cost-mgmt-setup custom resource requires the clusterID and reporting_operator_token_name to be defined.'
  when: not ocp_cluster_id or not reporting_operator_token_name

- name: Obtain metering api info
  k8s_info:
    api_version: v1
    kind: Route
    namespace: "{{ namespace }}"
  register: metering_route

- name: Set metering api route
  set_fact:
    metering_api_route: "{{ api_prefix }}{{ metering_route.resources[0].spec.host }}/api/v1/reports/get"
  when: metering_route.resources

- name: Get the service account token
  k8s_info:
    api_version: v1
    kind: Secret
    namespace: "{{ namespace }}"
    name: "{{ reporting_operator_token_name }}"
  register: reporting_token

- name: Decode the service account token
  set_fact:
    reporting_operator_token: "{{ reporting_token.resources[0].data.token | b64decode }}"
  when: reporting_token.resources

- name: Fail when reporting_operator_token not defined
  fail:
    msg: 'Reporting Operator token does not exist'
  when: not reporting_operator_token

- name: Set download request facts
  set_fact:
    collect_file_prefix: '{{ collect_manifest_uuid }}'
    format: "&format={{ collect_format }}"
    namespace: "&namespace={{ namespace }}"

# getting a little clever to build lists to append into
- name: initialize fact lists
  set_fact:
    api_params: []
    api_urls: []
    csv_files: []

# this appends the string inside the brackets to the 'api_params' list.
- name: compile URL query params, append to param list
  set_fact:
    api_params: "{{ api_params + ['?name='+item+format+namespace] }}"
  with_items: "{{ collect_reports }}"

# this appends the string inside the brackets to the 'api_urls' list.
- name: assemble compiled URL facts, append to list.
  set_fact:
    api_urls: "{{ api_urls + [metering_api_route+item] }}"
  with_items: "{{ api_params }}"

- name: Set download_path
  set_fact:
    collect_cluster_download_path: '{{ collect_download_path }}/{{  ocp_cluster_id }}'

- name: Remove temp files
  file:
    path: '{{ collect_cluster_download_path }}'
    state: absent
  when: collect_delete_after | bool

- name: Create temp dir for downloaded files
  file:
    path: '{{ collect_cluster_download_path }}'
    state: directory
    mode: 0777

- name: Download OCP report from endpoint
  get_url:
    url: '{{ item }}'
    headers:
      Authorization: "Bearer {{ reporting_operator_token }}"
    dest: '{{ collect_cluster_download_path }}/{{ collect_file_prefix }}_openshift_usage_report.{{ idx }}.{{ collect_format }}'
    validate_certs: '{{ ocp_validate_cert | bool }}'
    timeout: '{{ collect_ocp_report_timeout }}'
  with_items: "{{ api_urls }}"
  loop_control:
    index_var: idx
  register: download_result

- name: append filename to fact list
  set_fact:
    csv_files: "{{ csv_files + [item.dest | basename] }}"
  with_items: "{{ download_result.results }}"

- name: Check that required files exist
  stat:
    path: '{{ collect_cluster_download_path + "/" + item }}'
  register: csv_stat_result
  with_items:
    - '{{ csv_files }}'

- name: Check for empty download results
  fail:
    msg: 'Downloaded file {{ item }} has no content or could not be found: {{ item.stat }}.'
  when: not item.stat.exists or (item.stat.exists and item.stat.size <= 0)
  with_items:
    - '{{ csv_stat_result.results }}'

- name: Run packaging script to prepare reports for sending to Insights
  script: package_report.py --filepath {{ ocp_cluster_id }} --max-size {{ collect_max_csvfile_size }} --ocp-cluster-id {{ ocp_cluster_id }} --overwrite
  args:
    chdir: '{{ collect_download_path }}'
  register: packaged_reports
